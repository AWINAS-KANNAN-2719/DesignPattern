

Association, Aggregation and Composition:
https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition
https://www.javatpoint.com/uml-association-vs-aggregation-vs-composition   --- best
https://www.geeksforgeeks.org/association-composition-aggregation-java/
https://howtodoinjava.com/java/oops/association-aggregation-composition/

## Aggregation and Composition are a part of association
Aggregation : 
*has own life cycle. 
Ex : car with wheel. If the car stops working , the wheel can be user for other car.

Composition : Ex : Person with brain ,legs. If the persion dies, then brain, legs also dies.
*has Owners life cycle. 

Compostion over inheritance:

https://javarevisited.blogspot.com/2013/06/why-favor-composition-over-inheritance-java-oops-design.html#:~:text=1)%20One%20reason%20of%20favoring,doesn't%20support%20multiple%20inheritance.&text=2)%20Composition%20offers%20better%20test,class%20for%20sake%20of%20testing.
https://www.java-success.com/why-favor-composition-over-inheritance-in-java-oop/

 If there is no ‘is a’ relationship and all you want is polymorphism 
 then use interface inheritance with composition, which gives you code reuse.